Texture2D	 shaderTexture;
SamplerState SampleType;

// a)
// We have two new global variables inside the LightBuffer that hold the diffuse color and the direction of the light.
// These two variables will be set from values in the new LightClass object.

// b)
// The light constant buffer is updated with a new 4 float ambient color value.
// This will allow the ambient color to be set in this shader by outside classes.

cbuffer LightBuffer
{
	float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    //float  padding;
	float  specularPower;		// The light buffer has been updated to hold specularPower...
	float4 specularColor;		// ... and specularColor values for specular lighting calculations
};

struct PixelInputType
{
    float4 position		 : SV_POSITION;
    float2 tex			 : TEXCOORD0;
	float3 normal		 : NORMAL;
	float3 viewDirection : TEXCOORD1;		// The PixelInputType structure is modified here as well to reflect the changes to it in the vertex shader
};



// Pixel Shader
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float3 lightDir;
    float  lightIntensity;
    float4 color;
	float3 reflection;
	float4 specular;


    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);

	// We set the output color value to the base ambient color.
	// All pixels will now be illuminated by a minimum of the ambient color value.
    // Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// This is where the lighting equation that was discussed earlier is now implemented.
	// The light intensity value is calculated as the dot product between the normal vector of triangle and the light direction vector.

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));


	// Check if the N dot L is greater than zero.
	// If it is then add the diffuse color to the ambient color.
	// If not then you need to be careful to not add the diffuse color.
	// The reason being is that the diffuse color could be negative and it will subtract away some of the ambient color in the addition which is not correct.
    if(lightIntensity > 0.0f) {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);

		// Saturate the ambient and diffuse color.
		color = saturate(color);

		// The reflection vector for specular lighting is calculated here in the pixel shader provided the light intensity is greater than zero.
		// This is the same equation as listed at the beginning of the tutorial.

		// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		reflection = normalize(2 * lightIntensity * input.normal - lightDir);

		// The amount of specular light is then calculated using the reflection vector and the viewing direction.
		// The smaller the angle between the viewer and the light source the greater the specular light reflection will be.
		// The result is taken to the power of the specularPower value. The lower the specularPower value the greater the final effect is.

		// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }

	// And finally the diffuse value of the light is combined with the texture pixel value to produce the color result.

    // Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
    //color = saturate(diffuseColor * lightIntensity);

#if 0
	// Make sure to saturate the final output light color since the combination of ambient and diffuse could have been greater than 1.
	color = saturate(color);
#endif

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor;

	// We don't add the specular effect until the end.
	// It is a highlight and needs to be added to the final value or it will not show up properly.

	// Add the specular component last to the output color.
	color = saturate(color + specular);

    return color;
}
